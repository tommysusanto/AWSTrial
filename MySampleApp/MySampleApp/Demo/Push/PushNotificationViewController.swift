//
//  PushNotificationViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.2
//

import Foundation
import UIKit
import AWSMobileHubHelper

class PushNotificationViewController: UIViewController {
    @IBOutlet weak var pushNotificationSwitch: UISwitch!
    @IBOutlet var tableView: UITableView!
    
    // MARK:-  View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let pushManager: AWSPushManager = AWSPushManager.defaultPushManager()
        pushManager.delegate = self
        pushManager.registerForPushNotifications()
        pushNotificationSwitch.on = pushManager.enabled
        if let topicARNs = pushManager.topicARNs {
            pushManager.registerTopicARNs(topicARNs)
        }
    }
    
    // MARK:- IBActions
    
    @IBAction func toggleSwitch(sender: UISwitch) {
        if sender.on {
            // Ask the user for permissions to receive push notifications.
            AWSPushManager.defaultPushManager().registerForPushNotifications()
        } else {
            // Unsubscribe from all topics
            let alertController = UIAlertController(title: NSLocalizedString("Please Confirm", comment: "Title bar for alert dialog about confirming disable push feature."), message: NSLocalizedString("Do you want to disable push notifications?", comment: "Message asking user if they want to disable push feature."), preferredStyle: .Alert)
            let disableAction = UIAlertAction(title: NSLocalizedString("Disable", comment: "Disable Button on alert dialog."), style: .Default, handler: {(action: UIAlertAction) -> Void in
                AWSPushManager.defaultPushManager().disablePushNotifications()
            })
            let cancelAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: "Cancel button on alert dialog."), style: .Default, handler: nil)
            alertController.addAction(disableAction)
            alertController.addAction(cancelAction)
            presentViewController(alertController, animated: true, completion: nil)
        }
    }
}

// MARK:- UITableViewDelegate

extension PushNotificationViewController: UITableViewDelegate {
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return AWSPushManager.defaultPushManager().topics.count
    }
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        let pushManager = AWSPushManager.defaultPushManager()
        if pushManager.enabled {
            let topic = pushManager.topics[indexPath.row]
            if topic.subscribed {
                // Unsubscribe
                let alertController = UIAlertController(title: "Please Confirm", message: "Do you want to unsubscribe from the topic?", preferredStyle: .Alert)
                let unsubscribeAction = UIAlertAction(title: "Unsubscribe", style: .Default, handler: {(action: UIAlertAction) -> Void in
                    let topic = AWSPushManager.defaultPushManager().topics[indexPath.row]
                    topic.unsubscribe()
                })
                let cancelAction = UIAlertAction(title: "Cancel", style: .Cancel, handler: nil)
                alertController.addAction(unsubscribeAction)
                alertController.addAction(cancelAction)
                presentViewController(alertController, animated: true, completion: nil)
            } else {
                // Subscribe
                topic.subscribe()
            }
        }
    }
    
    func tableView(tableView: UITableView, shouldHighlightRowAtIndexPath indexPath: NSIndexPath) -> Bool {
        let pushManager = AWSPushManager.defaultPushManager()
        if !pushManager.enabled {
            return false
        }
        return true
    }
}

// MARK:- UITableViewDataSource

extension PushNotificationViewController: UITableViewDataSource {
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cellIdentifier = "AWSPushNotificationViewCell"
        let cell: UITableViewCell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath)
        let topic = AWSPushManager.defaultPushManager().topics[indexPath.row]
        cell.textLabel!.text = topic.topicName
        cell.detailTextLabel!.text = topic.topicARN
        cell.accessoryType = topic.subscribed ? .Checkmark : .None
        return cell
    }
}

// MARK:- AWSPushManagerDelegate

extension PushNotificationViewController: AWSPushManagerDelegate {
    func pushManagerDidRegister(pushManager: AWSPushManager) {
        print("Successfully enabled Push Notifications.")
        pushNotificationSwitch.on = pushManager.enabled
        // Subscribe the first topic among the configured topics (all-device topic)
        if let defaultSubscribeTopic = pushManager.topicARNs?.first {
            let topic = pushManager.topicForTopicARN(defaultSubscribeTopic)
            topic.subscribe()
        }
    }
    
    func pushManager(pushManager: AWSPushManager, didFailToRegisterWithError error: NSError) {
        pushNotificationSwitch.on = false
        showAlertWithTitle("Error", message: "Failed to enable Push Notifications.")
    }
    
    func pushManager(pushManager: AWSPushManager, didReceivePushNotification userInfo: [NSObject : AnyObject]) {
        dispatch_async(dispatch_get_main_queue(), {
            print("Received a Push Notification: \(userInfo)")
            self.showAlertWithTitle("Received a Push Notification.", message: userInfo.description)
        })
    }
    
    func pushManagerDidDisable(pushManager: AWSPushManager) {
        print("Successfully disabled Push Notification.")
        dispatch_async(dispatch_get_main_queue(), {
            self.tableView.reloadData()
        })
    }
    
    func pushManager(pushManager: AWSPushManager, didFailToDisableWithError error: NSError) {
        print("Failed to subscibe to a topic: \(error)")
        showAlertWithTitle("Error", message: "Failed to unsubscribe from all the topics.")
    }
}

// MARK:- AWSPushTopicDelegate

extension PushNotificationViewController: AWSPushTopicDelegate {
    
    func topicDidSubscribe(topic: AWSPushTopic) {
        print("Successfully subscribed to a topic: \(topic.topicName)")
        tableView.reloadData()
    }
    
    func topic(topic: AWSPushTopic, didFailToSubscribeWithError error: NSError) {
        print("Failed to subscribe to topic: \(topic.topicName)")
        showAlertWithTitle("Error", message: "Failed to subscribe to \(topic.topicName)")
    }
    
    func topicDidUnsubscribe(topic: AWSPushTopic) {
        print("Successfully unsubscribed from a topic: \(topic)")
        self.tableView.reloadData()
    }
    
    func topic(topic: AWSPushTopic, didFailToUnsubscribeWithError error: NSError) {
        print("Failed to subscribe to a topic: \(error)")
        showAlertWithTitle("Error", message: "Failed to unsubscribe from : \(topic.topicName)")
    }
}

// MARK:- Utility methods

extension PushNotificationViewController {

    private func showAlertWithTitle(title: String, message: String) {
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .Alert)
        let cancelAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
        alertController.addAction(cancelAction)
        presentViewController(alertController, animated: true, completion: nil)
    }
}
